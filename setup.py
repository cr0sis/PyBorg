#!/usr/bin/env python3
"""
Interactive setup script for PyBorg IRC Bot
Helps users configure their first IRC network and environment
"""

import json
import os
import sys
from pathlib import Path
import re

def print_header():
    """Print welcome header"""
    print("🤖 PyBorg IRC Bot - Interactive Setup")
    print("=" * 50)
    print()

def get_input(prompt, default=None, validator=None):
    """Get user input with optional default and validation"""
    while True:
        if default:
            user_input = input(f"{prompt} [{default}]: ").strip()
            if not user_input:
                user_input = default
        else:
            user_input = input(f"{prompt}: ").strip()
            if not user_input:
                print("This field is required. Please enter a value.")
                continue
        
        if validator:
            if validator(user_input):
                return user_input
            else:
                print("Invalid input. Please try again.")
                continue
        
        return user_input

def validate_port(port_str):
    """Validate port number"""
    try:
        port = int(port_str)
        return 1 <= port <= 65535
    except ValueError:
        return False

def validate_channels(channels_str):
    """Validate channel list format"""
    channels = [ch.strip() for ch in channels_str.split(',')]
    for channel in channels:
        if not channel.startswith('#'):
            print(f"Channel names must start with '#': {channel}")
            return False
    return True

def validate_prefix(prefix):
    """Validate command prefix"""
    if len(prefix) != 1:
        print("Command prefix must be exactly one character")
        return False
    if prefix.isalnum():
        print("Command prefix should be a symbol (like !, ~, ?, etc.)")
        return False
    return True

def setup_paths():
    """Setup custom paths if needed"""
    print("📁 Directory Configuration")
    print("-" * 30)
    
    print("PyBorg will store data relative to the project directory by default.")
    print("Current project directory:", Path().absolute())
    
    use_custom = get_input("Use custom data directory? (y/n)", "n").lower().startswith('y')
    
    if use_custom:
        data_dir = get_input("Enter custom data directory path", str(Path().absolute() / "data"))
        web_dir = get_input("Enter custom web directory path", str(Path().absolute() / "web"))
        
        # Write custom paths to .env
        env_vars = {}
        env_vars['BOT_DATA_DIR'] = data_dir
        env_vars['BOT_WEB_DIR'] = web_dir
        
        print(f"✅ Custom paths configured:")
        print(f"   Data: {data_dir}")
        print(f"   Web: {web_dir}")
        
        return env_vars
    else:
        print("✅ Using default relative paths (recommended)")
        return {}

def setup_environment(path_vars=None):
    """Setup .env file"""
    print("\n📋 Environment Configuration")
    print("-" * 30)
    
    env_path = Path(".env")
    env_vars = path_vars or {}
    
    # Gemini API Key (required for AI features)
    print("\n🤖 AI Features Configuration:")
    print("PyBorg can chat with users using Google's Gemini AI.")
    has_gemini = get_input("Do you have a Google Gemini API key? (y/n)", "n").lower().startswith('y')
    
    if has_gemini:
        api_key = get_input("Enter your Gemini API key")
        env_vars['GEMINI_API_KEY'] = api_key
        print("✅ AI chat features will be enabled")
    else:
        print("ℹ️  AI chat features will be disabled")
        print("   You can add GEMINI_API_KEY to .env later to enable them")
    
    # NickServ password (optional)
    print("\n🔐 IRC Authentication:")
    has_nickserv = get_input("Do you need NickServ authentication? (y/n)", "n").lower().startswith('y')
    
    if has_nickserv:
        password = get_input("Enter your NickServ password")
        env_vars['NICKSERV_PASSWORD'] = password
        print("✅ NickServ authentication configured")
    
    # Twitch integration (optional)
    print("\n📺 Twitch Integration (optional):")
    has_twitch = get_input("Do you want Twitch integration? (y/n)", "n").lower().startswith('y')
    
    if has_twitch:
        client_id = get_input("Enter your Twitch Client ID")
        client_secret = get_input("Enter your Twitch Client Secret")
        env_vars['TWITCH_CLIENT_ID'] = client_id
        env_vars['TWITCH_CLIENT_SECRET'] = client_secret
        print("✅ Twitch integration configured")
    
    # Write .env file
    if env_vars:
        with open(env_path, 'w') as f:
            f.write("# PyBorg Environment Configuration\n")
            f.write("# Generated by setup.py\n\n")
            for key, value in env_vars.items():
                f.write(f"{key}={value}\n")
        print(f"\n✅ Environment configuration saved to {env_path}")
    else:
        print("\nℹ️  No environment variables configured")

def setup_network():
    """Setup network configuration"""
    print("\n🌐 IRC Network Configuration")
    print("-" * 35)
    
    networks = {}
    
    # Get network details
    network_id = get_input("Network identifier (e.g., 'freenode', 'libera')", "mynetwork")
    
    network_config = {}
    network_config['name'] = get_input("Network display name", network_id.title())
    network_config['host'] = get_input("IRC server hostname (e.g., irc.libera.chat)")
    network_config['port'] = int(get_input("Port number", "6697", validate_port))
    network_config['use_ssl'] = get_input("Use SSL/TLS? (y/n)", "y").lower().startswith('y')
    
    network_config['nickname'] = get_input("Bot nickname", "PyBorg")
    network_config['realname'] = get_input("Bot real name", "PyBorg IRC Bot")
    
    # Channels
    print("\nChannels to join (separate multiple channels with commas):")
    channels_str = get_input("Channels", "#general", validate_channels)
    network_config['channels'] = [ch.strip() for ch in channels_str.split(',')]
    
    # Command prefix
    network_config['command_prefix'] = get_input("Command prefix", "!", validate_prefix)
    
    # Advanced settings
    print("\n⚙️  Advanced Settings:")
    network_config['reconnect_delay'] = int(get_input("Reconnect delay (seconds)", "30"))
    network_config['auth_join_delay'] = int(get_input("Auth join delay (seconds)", "5"))
    
    networks[network_id] = network_config
    
    # Ask if they want to add more networks
    while True:
        add_more = get_input("\nAdd another network? (y/n)", "n").lower().startswith('y')
        if not add_more:
            break
            
        print()
        network_id = get_input("Network identifier")
        network_config = {}
        network_config['name'] = get_input("Network display name", network_id.title())
        network_config['host'] = get_input("IRC server hostname")
        network_config['port'] = int(get_input("Port number", "6697", validate_port))
        network_config['use_ssl'] = get_input("Use SSL/TLS? (y/n)", "y").lower().startswith('y')
        
        network_config['nickname'] = get_input("Bot nickname", "PyBorg")
        network_config['realname'] = get_input("Bot real name", "PyBorg IRC Bot")
        
        channels_str = get_input("Channels", "#general", validate_channels)
        network_config['channels'] = [ch.strip() for ch in channels_str.split(',')]
        
        network_config['command_prefix'] = get_input("Command prefix", "!", validate_prefix)
        network_config['reconnect_delay'] = int(get_input("Reconnect delay (seconds)", "30"))
        network_config['auth_join_delay'] = int(get_input("Auth join delay (seconds)", "5"))
        
        networks[network_id] = network_config
    
    # Create networks configuration
    config = {
        "networks": networks,
        "default_settings": {
            "rate_limit_messages": 6,
            "rate_limit_period": 30,
            "max_message_length": 400,
            "command_cooldown": 2,
            "ai_context_limit": 10,
            "database_backup_interval": 86400,
            "log_level": "INFO"
        }
    }
    
    # Write networks.json
    with open("networks.json", 'w') as f:
        json.dump(config, f, indent=2)
    
    print(f"\n✅ Network configuration saved to networks.json")
    return list(networks.keys())

def create_directories():
    """Create necessary directories using path system"""
    print("\n📁 Creating Directory Structure")
    print("-" * 35)
    
    # Import path system to get configured paths
    from core.paths import ensure_directories, DATA_DIR, LOG_DIR, DATABASE_DIR
    from core.paths import get_network_log_dir
    
    # Create base directories
    ensure_directories()
    
    # Create additional required directories
    additional_dirs = [
        DATA_DIR / "bot_status",
        DATA_DIR / "tmp" / "bot_commands", 
        DATA_DIR / "runtime" / "bot_status",
        DATA_DIR / "runtime" / "locks",
        DATA_DIR / "runtime" / "pid_files",
        DATA_DIR / "shared_storage",
        DATA_DIR / "realtime_events" / "bot_status",
        DATA_DIR / "realtime_events" / "commands",
        DATA_DIR / "realtime_events" / "games",
        DATA_DIR / "realtime_events" / "security",
        LOG_DIR / "security" / "alerts",
        LOG_DIR / "security" / "analysis", 
        LOG_DIR / "security" / "audit",
        LOG_DIR / "security" / "events",
        LOG_DIR / "website" / "errors",
        LOG_DIR / "website" / "security" / "alerts",
        LOG_DIR / "website" / "security" / "analysis",
        LOG_DIR / "website" / "security" / "audit",
        LOG_DIR / "website" / "security" / "events",
        LOG_DIR / "api",
        LOG_DIR / "file_access",
        LOG_DIR / "integrity",
        LOG_DIR / "system"
    ]
    
    for directory in additional_dirs:
        directory.mkdir(parents=True, exist_ok=True)
        print(f"✅ {directory.relative_to(Path().absolute())}")
    
    print(f"\n✅ All directories created successfully")
    print(f"   Data directory: {DATA_DIR}")
    print(f"   Database directory: {DATABASE_DIR}")
    print(f"   Log directory: {LOG_DIR}")

def run_tests():
    """Run setup validation tests"""
    print("\n🧪 Running Setup Tests")
    print("-" * 25)
    
    try:
        # Test configuration loading
        from core.config import BotConfig
        config = BotConfig()
        print(f"✅ Configuration loaded successfully")
        print(f"   Default network: {config.NETWORK}")
        print(f"   Host: {config.HOST}:{config.PORT}")
        
        # Test database system
        from core.database import BotDatabase
        db = BotDatabase('setup_test.db')
        print("✅ Database system working")
        
        # Test plugin system  
        from core.plugin_system import get_plugin_manager
        pm = get_plugin_manager(config.NETWORK, config.COMMAND_PREFIX)
        print(f"✅ Plugin system loaded {len(pm.commands)} commands")
        
        return True
    except Exception as e:
        print(f"❌ Setup test failed: {e}")
        return False

def print_completion(networks):
    """Print completion message"""
    print("\n🎉 Setup Complete!")
    print("=" * 30)
    print("\n🚀 Your PyBorg IRC bot is ready to start!")
    
    print(f"\n📋 Configuration Summary:")
    print(f"   • {len(networks)} network(s) configured")
    print(f"   • Environment variables: {Path('.env').exists() and 'Yes' or 'No'}")
    print(f"   • Directories created: Yes")
    
    print(f"\n🎯 Next Steps:")
    print(f"   1. Start your bot:")
    if len(networks) == 1:
        print(f"      python bot_v2.py")
    else:
        print(f"      python bot_v2.py {networks[0]}    # Start {networks[0]}")
        for net in networks[1:]:
            print(f"      python bot_v2.py {net}       # Start {net}")
    
    print(f"\n   2. Monitor your bot:")
    print(f"      • Logs: data/logs/irc_networks/")
    print(f"      • Databases: data/databases/")
    print(f"      • Commands: Type your_prefix + help in IRC")
    
    print(f"\n📚 Documentation:")
    print(f"   • README_SETUP.md - Detailed setup guide")
    print(f"   • test_setup.py - Validate configuration")
    print(f"   • networks.json - Network settings")
    
    print(f"\n🆘 Need Help?")
    print(f"   • Run: python test_setup.py")
    print(f"   • Check logs in data/logs/")
    print(f"   • Review configuration files")

def main():
    """Main setup flow"""
    print_header()
    
    # Check if already configured
    if Path("networks.json").exists():
        overwrite = get_input("networks.json already exists. Overwrite? (y/n)", "n")
        if not overwrite.lower().startswith('y'):
            print("Setup cancelled.")
            return 1
    
    try:
        # Setup steps
        path_vars = setup_paths()
        setup_environment(path_vars)
        networks = setup_network()
        create_directories()
        
        print("\n⏳ Validating setup...")
        if run_tests():
            print_completion(networks)
            return 0
        else:
            print("\n❗ Setup validation failed. Please check the errors above.")
            return 1
            
    except KeyboardInterrupt:
        print("\n\n⚠️  Setup cancelled by user.")
        return 1
    except Exception as e:
        print(f"\n❌ Setup failed: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())